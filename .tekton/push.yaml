---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: pipeline-as-code-on-push
  annotations:
    pipelinesascode.tekton.dev/on-event: "[push]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
    pipelinesascode.tekton.dev/task: "[git-clone]"
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    tasks:
      - name: fetch
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source

      - name: unit
        runAfter:
          - fetch
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - image: public.ecr.aws/bitnami/golang:latest
              name: get-cache
              workingDir: $(workspaces.source.path)
              script: |
                #!/usr/bin/env bash
                set -ex
                mkdir -p go-build-cache;cd go-build-cache

                curl -fsI http://uploader:8080/golang-cache.tar || {
                    echo "no cache found"
                    exit 0
                }

                echo "Getting cache"
                curl http://uploader:8080/golang-cache.tar|tar -x -f-
            - name: unittest
              image: public.ecr.aws/bitnami/golang:latest
              workingDir: $(workspaces.source.path)
              script: |
                #!/usr/bin/env bash
                [[ -e $HOME/.cache/go-build ]] || { mkdir -p $HOME/.cache/ && ln -vs $(workspaces.source.path)/go-build-cache $HOME/.cache/go-build ;}
                make test GO_TEST_FLAGS="-v -race -coverprofile=coverage.txt -covermode=atomic"
      - name: codecov
        runAfter:
          - unit
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: codecov-run
              # Has everything we need in there and we already fetched it!
              image: public.ecr.aws/bitnami/golang:latest
              workingDir: $(workspaces.source.path)
              env:
                - name: CODECOV_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: pipelines-as-code-codecov-token
                      key: token
              script: |
                #!/usr/bin/env bash
                bash <(curl https://codecov.io/bash)
      - name: generate-release-yaml
        runAfter:
          - fetch
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          steps:
            - image: public.ecr.aws/bitnami/golang:latest
              name: generate
              script: |
                set -e
                bash -x hack/generate-releaseyaml.sh > release.yaml
              workingDir: $(workspaces.source.path)
          workspaces:
            - name: source

      - name: upload-release-yaml
        runAfter:
          - generate-release-yaml
        taskSpec:
          steps:
            - image: public.ecr.aws/bitnami/golang:latest
              name: release
              env:
                - name: UPLOADER_CREDS
                  valueFrom:
                    secretKeyRef:
                      name: "pipelines-as-code-uploader"
                      key: "creds"
              script: |
                set +x
                curl -F 'path=/pipelines-as-code/release-nightly.yaml' -F 'file=@release.yaml' -u "${UPLOADER_CREDS}" -X POST \
                https://uploader-cron.svc.ci.openshift.org/upload
              workingDir: $(workspaces.source.path)
          workspaces:
            - name: source
        workspaces:
          - name: source
            workspace: source
    workspaces:
      - name: source
  workspaces:
    - name: source
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
